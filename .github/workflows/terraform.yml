name: 🖥️Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'VERSION'

  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'VERSION'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  # ========================================
  # ETAPA 1: VALIDAÇÃO E PLAN
  # ========================================
  terraform-plan:
    name: '🔍 Terraform Plan & Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📝 Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check 

    - name: ✅ Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: 📋 Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var-file="environments/${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}.tfvars" -var="public_key=${{ secrets.SSH_PUBLIC_KEY }}" -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: 💾 Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan

  # ========================================
  # ETAPA 2: TESTES DE SEGURANÇA
  # ========================================
  security-scan:
    name: '🛡️ Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './terraform'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository_owner != 'actions'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: 📋 Display Trivy Results
      if: always()
      run: |
        echo "🔍 Trivy Security Scan Results:"
        echo "================================"
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ SARIF file generated successfully"
          echo "📊 Scan completed - check logs above for details"
        else
          echo "⚠️ No SARIF file generated"
        fi

  # ========================================
  # ETAPA 3: APLICAÇÃO
  # ========================================
  terraform-apply:
    name: '🚀 Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-plan, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 📥 Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform/

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: ⚡ Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: 📊 Get Terraform Outputs
      working-directory: ./terraform
      run: |
        echo "🌐 Environment: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}"
        echo "🌐 Instance Public IP: $(terraform output -raw instance_public_ip)"
        echo "🔗 Instance Public DNS: $(terraform output -raw instance_public_dns)"
        echo "🔒 Elastic IP: $(terraform output -raw elastic_ip)"
        echo "🏗️ VPC ID: $(terraform output -raw vpc_id)"
        echo "🔑 Key Name: $(terraform output -raw key_name)"
      continue-on-error: true

  # ========================================
  # ETAPA 4: TESTES PÓS-DEPLOY
  # ========================================
  post-deploy-tests:
    name: '🧪 Post-Deploy Tests'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 🔍 Test Infrastructure
      working-directory: ./terraform
      run: |
        echo "🧪 Testing ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }} environment..."
        
        # Aguarda a instância estar pronta
        echo "⏳ Aguardando instância estar pronta..."
        sleep 60
        
        # Obtém o Elastic IP
        INSTANCE_IP=$(terraform output -raw elastic_ip)
        if [ -z "$INSTANCE_IP" ]; then
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
        fi
        echo "🌐 Testando conectividade com $INSTANCE_IP"
        
        # Testa conectividade SSH
        if nc -z -w5 $INSTANCE_IP 22; then
          echo "✅ SSH port (22) is accessible"
        else
          echo "❌ SSH port (22) is not accessible"
          exit 1
        fi
        
        # Testa conectividade HTTP
        if nc -z -w5 $INSTANCE_IP 80; then
          echo "✅ HTTP port (80) is accessible"
        else
          echo "ℹ️ HTTP port (80) is not accessible (expected for basic setup)"
        fi
        
        # Testa conectividade HTTPS
        if nc -z -w5 $INSTANCE_IP 443; then
          echo "✅ HTTPS port (443) is accessible"
        else
          echo "ℹ️ HTTPS port (443) is not accessible (expected for basic setup)"
        fi

        # Testa conectividade 3000
        if nc -z -w5 $INSTANCE_IP 3000; then
          echo "✅ HTTPS port (3000) is accessible"
        else
          echo "ℹ️ HTTPS port (3000) is not accessible (expected for basic setup)"
        fi
        
        echo "🎉 Post-deployment tests completed successfully!"

  # ========================================
  # ETAPA 5: NOTIFICAÇÕES
  # ========================================
  notify:
    name: '📢 Notifications'
    runs-on: ubuntu-latest
    needs: [terraform-plan, security-scan, terraform-apply, post-deploy-tests]
    if: always()
    
    steps:
    - name: ✅ Notify Success
      if: needs.terraform-plan.result == 'success' && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped') && (needs.post-deploy-tests.result == 'success' || needs.post-deploy-tests.result == 'skipped')
      run: |
        echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "====================================="
        echo "✅ Terraform Plan: SUCCESS"
        echo "✅ Security Scan: SUCCESS"
        echo "✅ Terraform Apply: ${{ needs.terraform-apply.result }}"
        echo "✅ Post-Deploy Tests: ${{ needs.post-deploy-tests.result }}"
        echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}"
        echo ""
        echo "🌐 Your infrastructure is now deployed and tested!"
        echo "🔑 SSH key configured from secret"
        echo "🛡️ Security scan completed"
        echo "🧪 All infrastructure tests passed"
        
    - name: ⚠️ Notify Partial Success
      if: needs.terraform-plan.result == 'success' && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped') && (needs.security-scan.result == 'failure' || needs.post-deploy-tests.result == 'failure')
      run: |
        echo "⚠️ DEPLOYMENT COMPLETED WITH WARNINGS!"
        echo "====================================="
        echo "✅ Terraform Plan: SUCCESS"
        echo "✅ Terraform Apply: ${{ needs.terraform-apply.result }}"
        echo "❌ Security Scan: ${{ needs.security-scan.result }}"
        echo "❌ Post-Deploy Tests: ${{ needs.post-deploy-tests.result }}"
        echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}"
        echo ""
        echo "🌐 Infrastructure deployed but some tests failed"
        echo "🔍 Check the logs for details"
        
    - name: ❌ Notify Failure
      if: needs.terraform-plan.result == 'failure' || needs.terraform-apply.result == 'failure'
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "===================="
        echo "❌ Terraform Plan: ${{ needs.terraform-plan.result }}"
        echo "❌ Terraform Apply: ${{ needs.terraform-apply.result }}"
        echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}"
        echo ""
        echo "🔍 Check the logs for more details"
        echo "🚨 Manual intervention may be required"

  # ========================================
  # ETAPA 6: LIMPEZA
  # ========================================
  cleanup:
    name: '🧹 Cleanup'
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-apply, notify]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 🧹 Cleanup Artifacts
      run: |
        echo "🧹 Cleaning up temporary artifacts..."
        echo "✅ Cleanup completed"
        
    - name: 📊 Final Status
      run: |
        echo "📊 PIPELINE SUMMARY"
        echo "==================="
        echo "🔍 Plan Status: ${{ needs.terraform-plan.result }}"
        echo "🛡️ Security Status: ${{ needs.security-scan.result }}"
        echo "🚀 Apply Status: ${{ needs.terraform-apply.result }}"
        echo "🧪 Post-Deploy Tests: ${{ needs.post-deploy-tests.result }}"
        echo "🌍 Environment: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}"
        echo ""
        echo "🎯 Pipeline completed!" 