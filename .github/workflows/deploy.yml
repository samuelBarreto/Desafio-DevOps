name: 🚀 Application Deployment (CD)

on:
  workflow_run:
    workflows: ["Backend CI Pipeline", "Terraform CI/CD Pipeline"]
    types: [completed]
    branches: [main]

env:
  DOCKER_IMAGE_NAME: 1234samue/desafio-devops-api
  DOCKER_TAG: 0.0.1
  AWS_REGION: 'us-east-1'

jobs:
  # ========================================
  # ETAPA 1: VERIFICAÇÃO DE PRÉ-REQUISITOS
  # ========================================
  check-prerequisites:
    name: '🔍 Check Prerequisites'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📊 Get Infrastructure Info
      working-directory: ./terraform
      id: infra
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT
        echo "security_group_id=$(terraform output -raw security_group_id)" >> $GITHUB_OUTPUT

    - name: 📋 Display Infrastructure Info
      run: |
        echo "🌐 Instance Public IP: ${{ steps.infra.outputs.instance_ip }}"
        echo "🆔 Instance ID: ${{ steps.infra.outputs.instance_id }}"
        echo "🛡️ Security Group ID: ${{ steps.infra.outputs.security_group_id }}"

    - name: 🔍 Verify Instance Status
      run: |
        echo "🔍 Verificando status da instância..."
        aws ec2 describe-instances \
          --instance-ids ${{ steps.infra.outputs.instance_id }} \
          --query 'Reservations[0].Instances[0].State.Name' \
          --output text
        
        # Aguardar instância estar running
        echo "⏳ Aguardando instância estar pronta..."
        aws ec2 wait instance-running --instance-ids ${{ steps.infra.outputs.instance_id }}
        echo "✅ Instância está running!"

  # ========================================
  # ETAPA 2: DEPLOY DA APLICAÇÃO
  # ========================================
  deploy-application:
    name: '🚀 Deploy Application'
    runs-on: ubuntu-latest
    needs: check-prerequisites
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📊 Get Instance IP
      working-directory: ./terraform
      id: infra
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

    - name: 🔐 Setup SSH Connection
      run: |
        # Criar diretório .ssh
        mkdir -p ~/.ssh
        
        # Configurar chave privada
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Configurar known_hosts
        ssh-keyscan -H ${{ steps.infra.outputs.instance_ip }} >> ~/.ssh/known_hosts
        
        # Testar conexão SSH
        echo "🔍 Testando conexão SSH..."
        ssh -o ConnectTimeout=10 ubuntu@${{ steps.infra.outputs.instance_ip }} "echo 'SSH connection successful'"

    - name: 🐳 Deploy Docker Application
      run: |
        echo "🚀 Iniciando deploy da aplicação..."
        
        # Comandos para deploy via SSH
        ssh ubuntu@${{ steps.infra.outputs.instance_ip }} << 'EOF'
          echo "📁 Navegando para diretório da aplicação..."
          cd /opt/app/desafio-devops/backend
          
          echo "🔄 Parando containers existentes..."
          docker compose -f docker-compose.prod.yml down || true
          
          echo "🧹 Limpando imagens antigas..."
          docker system prune -f
          
          echo "📥 Baixando nova imagem..."
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          
          echo "🚀 Iniciando aplicação..."
          docker compose -f docker-compose.prod.yml up -d
          
          echo "⏳ Aguardando aplicação inicializar..."
          sleep 30
          
          echo "🔍 Verificando status dos containers..."
          docker compose -f docker-compose.prod.yml ps
          
          echo "📊 Verificando logs da aplicação..."
          docker compose -f docker-compose.prod.yml logs --tail=20
        EOF

  # ========================================
  # ETAPA 3: TESTES PÓS-DEPLOY
  # ========================================
  post-deploy-tests:
    name: '🧪 Post-Deploy Tests'
    runs-on: ubuntu-latest
    needs: deploy-application
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📊 Get Instance IP
      working-directory: ./terraform
      id: infra
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

    - name: 🔍 Health Check
      run: |
        echo "🔍 Verificando health check da aplicação..."
        
        # Aguardar aplicação estar pronta
        for i in {1..30}; do
          echo "⏳ Tentativa $i/30 - Verificando health check..."
          if curl -f http://${{ steps.infra.outputs.instance_ip }}:3000/health > /dev/null 2>&1; then
            echo "✅ Health check passou!"
            break
          fi
          sleep 10
        done
        
        # Teste final
        if ! curl -f http://${{ steps.infra.outputs.instance_ip }}:3000/health; then
          echo "❌ Health check falhou após 30 tentativas"
          exit 1
        fi

    - name: 🧪 API Tests
      run: |
        echo "🧪 Executando testes da API..."
        
        # Teste de criação de usuário
        echo "📝 Testando criação de usuário..."
        curl -X POST http://${{ steps.infra.outputs.instance_ip }}:3000/users \
          -H "Content-Type: application/json" \
          -d '{"name":"Test User","email":"test@example.com","password":"123456","age":25}' \
          -w "\nStatus: %{http_code}\n"
        
        # Teste de listagem de usuários
        echo "📋 Testando listagem de usuários..."
        curl -X GET http://${{ steps.infra.outputs.instance_ip }}:3000/users \
          -w "\nStatus: %{http_code}\n"
        
        # Teste de health check
        echo "💚 Testando health check..."
        curl -X GET http://${{ steps.infra.outputs.instance_ip }}:3000/health \
          -w "\nStatus: %{http_code}\n"

    - name: 🔐 Security Tests
      run: |
        echo "🔐 Executando testes de segurança..."
        
        # Teste de headers de segurança
        echo "🛡️ Verificando headers de segurança..."
        curl -I http://${{ steps.infra.outputs.instance_ip }}:3000/health
        
        # Teste de CORS
        echo "🌐 Verificando CORS..."
        curl -H "Origin: https://malicious-site.com" \
          -H "Access-Control-Request-Method: POST" \
          -H "Access-Control-Request-Headers: Content-Type" \
          -X OPTIONS http://${{ steps.infra.outputs.instance_ip }}:3000/users \
          -v

  # ========================================
  # ETAPA 4: MONITORAMENTO E NOTIFICAÇÃO
  # ========================================
  monitoring:
    name: '📊 Monitoring & Notification'
    runs-on: ubuntu-latest
    needs: [deploy-application, post-deploy-tests]
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📊 Get Infrastructure Info
      working-directory: ./terraform
      id: infra
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT

    - name: 📈 System Monitoring
      run: |
        echo "📈 Verificando métricas do sistema..."
        
        # Verificar uso de CPU e memória da instância
        aws cloudwatch get-metric-statistics \
          --namespace AWS/EC2 \
          --metric-name CPUUtilization \
          --dimensions Name=InstanceId,Value=${{ steps.infra.outputs.instance_id }} \
          --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
          --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
          --period 300 \
          --statistics Average

    - name: 📋 Deployment Summary
      run: |
        echo "🎉 DEPLOYMENT SUMMARY"
        echo "===================="
        echo "✅ Application deployed successfully!"
        echo "🌐 Public URL: http://${{ steps.infra.outputs.instance_ip }}:3000"
        echo "🆔 Instance ID: ${{ steps.infra.outputs.instance_id }}"
        echo "🐳 Docker Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}"
        echo "📅 Deployed at: $(date)"
        echo "🔗 Health Check: http://${{ steps.infra.outputs.instance_ip }}:3000/health"
        echo "📊 API Endpoints:"
        echo "   - GET /health"
        echo "   - GET /users"
        echo "   - POST /users"
        echo "   - GET /users/:id"
        echo "   - PUT /users/:id"
        echo "   - DELETE /users/:id"

    - name: 📢 Success Notification
      if: success()
      run: |
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "========================="
        echo "✅ All tests passed"
        echo "✅ Application is running"
        echo "✅ Security checks passed"
        echo "🌐 Access your application at: http://${{ steps.infra.outputs.instance_ip }}:3000"

    - name: 🚨 Failure Notification
      if: failure()
      run: |
        echo "❌ DEPLOYMENT FAILED!"
        echo "====================="
        echo "❌ One or more steps failed"
        echo "🔍 Check the logs above for details"
        echo "🔄 Manual intervention may be required" 