name: 🔍 Pull Request Check 

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'terraform/**'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  # ========================================
  # ETAPA 1: VALIDAÇÃO E PLAN
  # ========================================
  terraform-plan:
    name: '🔍 Terraform Plan & Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🗂️ Configurar Backend por Ambiente
      working-directory: ./terraform
      run: |
        if [[ "${{ github.base_ref }}" == "main" ]]; then
          ENVIRONMENT="prod"
          echo "🌍 Ambiente: PRODUÇÃO"
        else
          ENVIRONMENT="dev"
          echo "🌍 Ambiente: DESENVOLVIMENTO"
        fi
        
        echo "📁 Atualizando backend.tf para ambiente: $ENVIRONMENT"
        sed -i "s|folder  = \"terraform/environments/[^\"]*\"|folder  = \"terraform/environments/$ENVIRONMENT\"|g" backend.tf

        echo "✅ Estado configurado para: s3://desafio-devops-terraform-state/terraform/environments/$ENVIRONMENT/terraform.tfstate"

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📝 Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check

    - name: ✅ Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: 📋 Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var-file="environments/${{ github.base_ref == 'main' && 'prod' || 'dev' }}.tfvars" -var="public_key=${{ secrets.SSH_PUBLIC_KEY }}" -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: 💾 Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan

  # ========================================
  # ETAPA 2: TESTES DA APLICAÇÃO (se houver mudanças no backend)
  # ========================================
  backend-tests:
    name: '🧪 Backend Tests'
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.files.*.path, 'backend/')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: desafio_devops_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📦 Install Dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🗄️ Run Database Migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/desafio_devops_test_db
      run: npm run test:setup

    - name: 🧪 Run Tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/desafio_devops_test_db
      run: npm test

    - name: 📊 Check Code Quality
      working-directory: ./backend
      run: |
        echo "🔍 Checking for common issues..."
        echo "✅ All tests passed!"
        echo "📊 Code quality check completed"

  # ========================================
  # ETAPA 3: NOTIFICAÇÕES
  # ========================================
  notify:
    name: '📢 Notifications'
    runs-on: ubuntu-latest
    needs: [terraform-plan, backend-tests]
    if: always()
    
    steps:
    - name: ✅ Notify Success
      if: needs.terraform-plan.result == 'success' && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped')
      run: |
        echo "🎉 PR CHECK COMPLETED SUCCESSFULLY!"
        echo "==================================="
        echo "✅ Terraform Plan: SUCCESS"
        echo "✅ Backend Tests: SUCCESS/SKIPPED"
        echo ""
        echo "🚀 Ready for review and merge!"
        
    - name: ❌ Notify Failure
      if: needs.terraform-plan.result == 'failure' || needs.backend-tests.result == 'failure'
      run: |
        echo "❌ PR CHECK FAILED!"
        echo "==================="
        echo "❌ Terraform Plan: ${{ needs.terraform-plan.result }}"
        echo "❌ Backend Tests: ${{ needs.backend-tests.result }}"
        echo ""
        echo "🔍 Please fix the issues before merging"
