name: 🚀 Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use VERSION file)'
        required: false
        type: string

env:
  DOCKER_IMAGE_NAME: 1234samue/desafio-devops-api
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'prod'  # Release sempre para produção

permissions:
  contents: write
  packages: write

jobs:
  # ========================================
  # ETAPA 1: VALIDAR E LER VERSÃO
  # ========================================
  validate-version:
    name: '🔍 Validate Version'
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version-tag: ${{ steps.get-version.outputs.version-tag }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Read Version from File
      id: get-version
      run: |
        # Ler versão do arquivo VERSION ou usar input manual
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "📋 Using manual version: $VERSION"
        else
          VERSION=$(cat VERSION | tr -d ' \t\n\r')
          echo "📋 Using version from file: $VERSION"
        fi
        
        # Validar formato da versão (semver)
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Expected: X.Y.Z (e.g., 1.0.0)"
          exit 1
        fi
        
        # Criar tag da versão
        VERSION_TAG="v$VERSION"
        
        echo "✅ Version validated: $VERSION"
        echo "🏷️ Version tag: $VERSION_TAG"
        echo "🌍 Environment: ${{ env.ENVIRONMENT }}"
        
        # Set outputs
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT

    - name: 📋 Display Version Info
      run: |
        echo "🎯 RELEASE INFO"
        echo "==============="
        echo "Version: ${{ steps.get-version.outputs.version }}"
        echo "Version Tag: ${{ steps.get-version.outputs.version-tag }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Docker Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get-version.outputs.version }}"

  # ========================================
  # ETAPA 2: BUILD E PUSH DA IMAGEM
  # ========================================
  build-and-push:
    name: '🐳 Build and Push Docker Image'
    runs-on: ubuntu-latest
    needs: validate-version
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 📦 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.validate-version.outputs.version }}
          type=raw,value=${{ needs.validate-version.outputs.version-tag }}
          type=raw,value=latest
          type=sha

    - name: 📦 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.validate-version.outputs.version }}

    - name: 📋 Display Image Info
      run: |
        echo "🐳 DOCKER IMAGE INFO"
        echo "==================="
        echo "Image: ${{ env.DOCKER_IMAGE_NAME }}"
        echo "Version: ${{ needs.validate-version.outputs.version }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Pushed successfully! 🚀"

  # ========================================
  # ETAPA 3: ATUALIZAR IMAGEM NA VM (PRODUÇÃO)
  # ========================================
  update-vm-image:
    name: '🖥️ Update Image in VM (PRODUCTION)'
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-push]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 🔍 Configure Production Environment
      id: env
      run: |
        echo "🌍 Environment: ${{ env.ENVIRONMENT }}"
        echo "🏭 This is a PRODUCTION release!"
        echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
        
        # Configurar backend para produção
        echo "🗂️ Configurando backend para ambiente: ${{ env.ENVIRONMENT }}"
        cd terraform
        
        # Backup do arquivo original
        cp backend.tf backend.tf.backup
        
        # Atualizar o backend para produção dinamicamente
        sed -i "s|key     = \"terraform/environments/dev/terraform.tfstate\"|key     = \"terraform/environments/${{ env.ENVIRONMENT }}/terraform.tfstate\"|g" backend.tf
        echo "✅ Backend configurado para: terraform/environments/${{ env.ENVIRONMENT }}/terraform.tfstate"

    - name: 🔄 Reinitialize Terraform with New Backend
      working-directory: ./terraform
      run: |
        echo "🔄 Reinitializando Terraform com nova configuração de backend..."
        terraform init -reconfigure
        echo "✅ Terraform reinitializado com sucesso"

    - name: 📊 Get Instance IP from Terraform
      working-directory: ./terraform
      id: infra
      run: |
        echo "🔍 Obtendo IP da instância via Terraform (PRODUÇÃO)..."
        echo "🌍 Environment: ${{ steps.env.outputs.environment }}"
        
        # Verificar se o state existe e tem recursos
        echo "🔍 Verificando estado do Terraform..."
        if ! terraform state list > /dev/null 2>&1; then
          echo "❌ ERRO: Terraform state não encontrado ou vazio!"
          echo "💡 Verificando se a infraestrutura está aplicada..."
          terraform show || echo "❌ Terraform state não encontrado"
          echo "💡 Verificando se há recursos no state..."
          terraform state list || echo "❌ Nenhum recurso encontrado no state"
          exit 1
        fi
        
        # Verificar se há recursos no state
        RESOURCE_COUNT=$(terraform state list | wc -l)
        if [ "$RESOURCE_COUNT" -eq 0 ]; then
          echo "❌ ERRO: State existe mas não há recursos aplicados!"
          echo "💡 Execute 'terraform apply' primeiro para criar a infraestrutura"
          exit 1
        fi
        
        echo "✅ State encontrado com $RESOURCE_COUNT recursos"
        
        # Obter o IP da instância (Elastic IP) diretamente do state
        INSTANCE_IP=$(terraform output -raw elastic_ip 2>/dev/null) || {
          echo "❌ ERRO: Não foi possível obter o Elastic IP da instância!"
          echo "💡 Verificando outputs disponíveis..."
          terraform output || echo "❌ Nenhum output encontrado"
          echo "💡 Verificando se o recurso elastic_ip existe..."
          terraform state list | grep -i elastic || echo "❌ Recurso elastic_ip não encontrado"
          exit 1
        }
        
        # Validar se o IP não está vazio
        if [ -z "$INSTANCE_IP" ]; then
          echo "❌ ERRO: IP da instância está vazio!"
          exit 1
        fi
        
        # Validar formato do IP
        if ! echo "$INSTANCE_IP" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
          echo "❌ ERRO: Formato de IP inválido: $INSTANCE_IP"
          exit 1
        fi
        
        echo "✅ Elastic IP da instância obtido via Terraform: $INSTANCE_IP"
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

    - name: 🔐 Setup SSH Connection
      run: |
        echo "🔍 Configurando SSH para ambiente PRODUÇÃO..."
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.infra.outputs.instance_ip }} >> ~/.ssh/known_hosts 2>/dev/null || true
        echo "✅ SSH configurado para ${{ steps.infra.outputs.instance_ip }}"

    - name: 🔄 Update Image in VM
      run: |
        echo "🔄 Atualizando imagem na VM de PRODUÇÃO..."
        echo "🌍 Environment: PRODUCTION"
        echo "🔧 NODE_ENV: production"
        echo "🌐 Instance IP: ${{ steps.infra.outputs.instance_ip }}"
        echo "🐳 New Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}"
        
        ssh ubuntu@${{ steps.infra.outputs.instance_ip }} << EOF
          echo "🌍 Environment: PRODUCTION"
          echo "🔧 NODE_ENV: production"
          echo "📁 Navegando para diretório da aplicação..."
          cd /opt/app/desafio-devops/backend

          git pull
          echo "✅ Pull realizado com sucesso"
          
          echo "📝 Atualizando docker-compose.prod.yml com nova versão..."
          
          # Backup do arquivo original
          cp docker-compose.prod.yml docker-compose.prod.yml.backup
          
          # Atualizar a imagem com a nova versão
          sed -i "s|image:.*1234samue/desafio-devops-api:.*|image: docker.io/1234samue/desafio-devops-api:${{ needs.validate-version.outputs.version }}|g" docker-compose.prod.yml
          
          # Atualizar a versão no environment
          sed -i "s|VERSION:.*|VERSION: ${{ needs.validate-version.outputs.version }}|g" docker-compose.prod.yml
          
          # Garantir que NODE_ENV está como production (release sempre para produção)
          sed -i "s|NODE_ENV:.*|NODE_ENV: production|g" docker-compose.prod.yml
          
          echo "✅ docker-compose.prod.yml atualizado com versão ${{ needs.validate-version.outputs.version }} e NODE_ENV: production"
          
          echo "🔄 Parando containers existentes..."
          docker compose -f docker-compose.prod.yml down || true
          
          echo "📥 Baixando nova imagem..."
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}
          
          echo "🚀 Iniciando aplicação com nova versão..."
          docker compose -f docker-compose.prod.yml up -d
          
          echo "⏳ Aguardando aplicação inicializar..."
          sleep 30
          
          echo "🔍 Verificando status dos containers..."
          docker compose -f docker-compose.prod.yml ps
          
          echo "📊 Verificando logs da aplicação..."
          docker compose -f docker-compose.prod.yml logs --tail=20
        EOF

  # ========================================
  # ETAPA 4: CRIAR GIT TAG E RELEASE
  # ========================================
  create-release:
    name: '🏷️ Create Git Tag and Release'
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-push, update-vm-image]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: 🏷️ Create Git Tag
      run: |
        echo "🏷️ Creating git tag: ${{ needs.validate-version.outputs.version-tag }}"
        git tag -a "${{ needs.validate-version.outputs.version-tag }}" -m "Release version ${{ needs.validate-version.outputs.version }}"
        echo "✅ Git tag created locally"

    - name: 🚀 Push Git Tag
      run: |
        echo "🚀 Pushing git tag to remote..."
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git push origin "${{ needs.validate-version.outputs.version-tag }}"
        echo "✅ Git tag pushed successfully"

    - name: 🧹 Restore Original Backend Configuration
      working-directory: ./terraform
      if: always()
      run: |
        echo "🧹 Restaurando configuração original do backend..."
        if [ -f backend.tf.backup ]; then
          mv backend.tf.backup backend.tf
          echo "✅ Backend configuration restored"
        else
          echo "⚠️ Backup file not found, skipping restore"
        fi

    - name: 📋 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-version.outputs.version-tag }}
        release_name: Release ${{ needs.validate-version.outputs.version }}
        body: |
          🚀 Release Version ${{ needs.validate-version.outputs.version }}
          
          ## 🌍 Environment
          - **Environment**: PRODUCTION
          - **Deployed to**: Production VM
          
          ## 📦 Docker Image
          - **Image**: `${{ env.DOCKER_IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}`
          - **Tag**: `${{ needs.validate-version.outputs.version-tag }}`
          
          ## 🚀 Deploy
          - ✅ Docker image built and pushed
          - ✅ Production VM updated with new image
          - ✅ Application deployed successfully to PRODUCTION
          
          ## 📊 API Endpoints
          - Health Check: `/health`
          - Users: `/users`
          
          ## 🔗 Links
          - Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_IMAGE_NAME }}
        draft: false
        prerelease: false

    - name: 📋 Display Release Summary
      run: |
        echo "🎉 RELEASE SUMMARY"
        echo "=================="
        echo "🌍 Environment: PRODUCTION"
        echo "✅ Version: ${{ needs.validate-version.outputs.version }}"
        echo "✅ Tag: ${{ needs.validate-version.outputs.version-tag }}"
        echo "✅ Docker Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}"
        echo "✅ Production VM updated with new image"
        echo "✅ Git tag created"
        echo "✅ GitHub release created"
        echo ""
        echo "🎯 Release completed successfully to PRODUCTION!" 