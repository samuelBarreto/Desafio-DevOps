name: CI  Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]


env:
  DOCKER_IMAGE_NAME: samuelcandrade/desafio-devops-api
  DOCKER_TAG: latest

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: desafio
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      env:
        NODE_ENV: test
      run: npm ci

    - name: Generate Prisma client
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/desafio
      run: npm run test:setup

    - name: Run tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/desafio
      run: npm test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan, dast-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan (SAST)
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image for security scan
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE_NAME }}:security-scan-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:security-scan-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dast-scan:
    name: DAST Security Scan
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start application
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:dast ./backend
        docker run -d --name app-dast -p 3000:3000 \
          -e NODE_ENV=test \
          -e DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/desafio \
          ${{ env.DOCKER_IMAGE_NAME }}:dast
        
        # Wait for app to be ready
        sleep 30

    - name: Run OWASP ZAP DAST scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload DAST results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dast-results
        path: |
          zap-report.html
          zap-report.json

    - name: Cleanup
      if: always()
      run: |
        docker stop app-dast || true
        docker rm app-dast || true

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, security-scan, dast-scan, build-and-push]
    if: always() && needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.dast-scan.result == 'success' && needs.build-and-push.result == 'success'
    
    steps:
    - name: Notify deployment success
      run: |
        echo "‚úÖ CI Pipeline completed successfully!"
        echo "üß™ Tests passed"
        echo "üîí SAST scan passed (Trivy)"
        echo "üõ°Ô∏è DAST scan passed (OWASP ZAP)"
        echo "üöÄ Docker image pushed to Docker Hub"
        echo "üì¶ Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}" 