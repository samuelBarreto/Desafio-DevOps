name: Terraform CI/CD (Destroy)

on:
  pull_request:
    branches: [ destroy ]
    paths:
      - 'terraform/**'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  # ========================================
  # ETAPA 1: VALIDAÇÃO E PLAN
  # ========================================
  terraform-plan:
    name: '🔍 Terraform Plan & Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📝 Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check 

    - name: ✅ Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: 📋 Terraform Plan
      working-directory: ./terraform
      run: terraform plan -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_elastic_ip_address: "3.219.24.200"

    - name: 💾 Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan

  # ========================================
  # ETAPA 2: TESTES DE SEGURANÇA
  # ========================================
  security-scan:
    name: '🛡️ Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './terraform'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository_owner != 'actions'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: 📋 Display Trivy Results
      if: always()
      run: |
        echo "🔍 Trivy Security Scan Results:"
        echo "================================"
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ SARIF file generated successfully"
          echo "📊 Scan completed - check logs above for details"
        else
          echo "⚠️ No SARIF file generated"
        fi

  # ========================================
  # ETAPA 3: TESTES DE INFRAESTRUTURA (SIMULADOS)
  # ========================================
  infrastructure-destroy:
    name: '🧪 Infrastructure Destroy'
    runs-on: ubuntu-latest
    needs: terraform-plan
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 🎯 Destroy Infrastructure Configuration
      working-directory: ./terraform
      run: terraform destroy -auto-approve
