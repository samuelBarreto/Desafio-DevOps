name: 🗑️ Terraform CI/CD (Destroy)

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Confirmar destroy da infraestrutura?'
        required: true
        default: false
        type: boolean
      environment:
        description: 'Ambiente para destruir'
        required: true
        default: 'dev'
        type: choice
        options:
        - prod
        - dev

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  # ========================================
  # ETAPA 1: VALIDAÇÃO E PLAN
  # ========================================
  terraform-plan:
    name: '🔍 Terraform Plan & Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🔍 Detect Environment
      id: env
      run: |
        # Detectar ambiente baseado no input manual
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        echo "🌍 Environment detected from manual input: $ENVIRONMENT"
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        
        # Configurar backend para o ambiente detectado
        echo "🗂️ Configurando backend para ambiente: $ENVIRONMENT"
        cd terraform
        sed -i "s|key     = \"terraform/environments/[^\"]*\"|key     = \"terraform/environments/$ENVIRONMENT/terraform.tfstate\"|g" backend.tf
        cd ..

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📝 Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check 

    - name: ✅ Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: 📋 Terraform Plan (Destroy)
      working-directory: ./terraform
      run: terraform plan -destroy -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -var="public_key=${{ secrets.SSH_PUBLIC_KEY }}" -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: 💾 Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-destroy-plan
        path: terraform/tfplan

    - name: 📊 Display Destroy Plan Summary
      working-directory: ./terraform
      run: |
        echo "🗑️ DESTROY PLAN SUMMARY"
        echo "======================="
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "📋 Resources to be destroyed:"
        terraform show -json tfplan | jq -r '.resource_changes[] | select(.change.actions[] == "delete") | "  - \(.type).\(.name)"' || echo "  No resources to destroy"
        echo "⚠️  WARNING: This will permanently delete all infrastructure!"

  # ========================================
  # ETAPA 2: DESTROY DE INFRAESTRUTURA 
  # ========================================
  infrastructure-destroy:
    name: '🗑️ Infrastructure Destroy'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event.inputs.confirm_destroy == 'true'
       
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔍 Detect Environment
      id: env
      run: |
        # Detectar ambiente baseado no input manual
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        echo "🌍 Environment detected from manual input: $ENVIRONMENT"
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        
        # Configurar backend para o ambiente detectado
        echo "🗂️ Configurando backend para ambiente: $ENVIRONMENT"
        cd terraform
        sed -i "s|key     = \"terraform/environments/[^\"]*\"|key     = \"terraform/environments/$ENVIRONMENT/terraform.tfstate\"|g" backend.tf

    - name: 🚀 Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: 📥 Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-destroy-plan
        path: terraform/

    - name: ⚠️ Final Warning
      run: |
        echo "⚠️  FINAL WARNING!"
        echo "=================="
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "🗑️ About to destroy ALL infrastructure!"
        echo "❌ This action is IRREVERSIBLE!"
        echo "🔍 Double-check the plan above before proceeding"
        echo "⏳ Proceeding with destroy in 10 seconds..."
        sleep 10

    - name: 🎯 Execute Terraform Destroy
      working-directory: ./terraform
      run: terraform apply tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: ✅ Destroy Complete
      run: |
        echo "🗑️ Infrastructure destroyed successfully!"
        echo "📊 Destroy completed at $(date)"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "🎯 Environment: ${{ github.event.inputs.environment }}"
        echo "✅ All resources have been removed from AWS"

  # ========================================
  # ETAPA 3: LIMPEZA E NOTIFICAÇÃO
  # ========================================
  cleanup-and-notify:
    name: '🧹 Cleanup & Notification'
    runs-on: ubuntu-latest
    needs: [terraform-plan, infrastructure-destroy]
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🧹 Cleanup S3 State
      if: needs.infrastructure-destroy.result == 'success'
      run: |
        echo "🧹 Cleaning up Terraform state from S3..."
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        STATE_KEY="terraform/environments/$ENVIRONMENT/terraform.tfstate"
        
        # Verificar se o arquivo de estado existe
        if aws s3 ls "s3://desafio-devops-terraform-state/$STATE_KEY" > /dev/null 2>&1; then
          echo "🗑️ Removing state file: s3://desafio-devops-terraform-state/$STATE_KEY"
          aws s3 rm "s3://desafio-devops-terraform-state/$STATE_KEY"
          echo "✅ State file removed successfully"
        else
          echo "ℹ️ State file not found, already cleaned up"
        fi

    - name: 📢 Success Notification
      if: needs.infrastructure-destroy.result == 'success'
      run: |
        echo "✅ INFRASTRUCTURE DESTROYED SUCCESSFULLY!"
        echo "========================================="
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "🗑️ All resources have been removed from AWS"
        echo "🧹 Terraform state cleaned up"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "⏰ Completed at: $(date)"
        echo ""
        echo "🎉 Infrastructure destruction completed successfully!"

    - name: ⚠️ Plan Only Notification
      if: needs.terraform-plan.result == 'success' && needs.infrastructure-destroy.result == 'skipped'
      run: |
        echo "📋 DESTROY PLAN GENERATED"
        echo "========================="
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "📋 Destroy plan was generated successfully"
        echo "⚠️  Destroy was NOT executed (confirm_destroy = false)"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "⏰ Completed at: $(date)"
        echo ""
        echo "💡 To execute the destroy, run this workflow again with confirm_destroy = true"

    - name: ❌ Failure Notification
      if: needs.terraform-plan.result == 'failure' || needs.infrastructure-destroy.result == 'failure'
      run: |
        echo "❌ INFRASTRUCTURE DESTROY FAILED!"
        echo "================================="
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "❌ One or more steps failed"
        echo "🔍 Check the logs above for details"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "⏰ Failed at: $(date)"
        echo ""
        echo "🚨 Manual intervention may be required"

    - name: 📊 Final Summary
      run: |
        echo "📊 DESTROY PIPELINE SUMMARY"
        echo "==========================="
        echo "🔍 Plan Status: ${{ needs.terraform-plan.result }}"
        echo "🗑️ Destroy Status: ${{ needs.infrastructure-destroy.result }}"
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "⏰ Completed at: $(date)"
        echo ""
        echo "🎯 Pipeline completed!"
