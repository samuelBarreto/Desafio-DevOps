### Testando a API REST - Desafio DevOps

### 1. Health Check
GET http://localhost:3000/health

### 2. Documentação da API
GET http://localhost:3000/

### 3. Listar todos os usuários
GET http://localhost:3000/api/users

### 4. Criar novo usuário
POST http://localhost:3000/api/users
Content-Type: application/json

{
  "email": "teste@example.com",
  "name": "Usuário Teste",
  "password": "senha123",
  "age": 25
}

### 5. Criar outro usuário
POST http://localhost:3000/api/users
Content-Type: application/json

{
  "email": "maria@example.com",
  "name": "Maria Silva",
  "password": "senha456",
  "age": 30
}

### 6. Buscar usuário por ID (substitua USER_ID pelo ID retornado na criação)
GET http://localhost:3000/api/users/USER_ID

### 7. Atualizar usuário (substitua USER_ID pelo ID retornado na criação)
PUT http://localhost:3000/api/users/USER_ID
Content-Type: application/json

{
  "name": "Nome Atualizado",
  "age": 26,
  "active": false
}

### 8. Deletar usuário (substitua USER_ID pelo ID retornado na criação)
DELETE http://localhost:3000/api/users/USER_ID

### 9. Teste de erro - Buscar usuário inexistente
GET http://localhost:3000/api/users/usuario-inexistente

### 10. Teste de erro - Criar usuário com email duplicado
POST http://localhost:3000/api/users
Content-Type: application/json

{
  "email": "teste@example.com",
  "name": "Usuário Duplicado",
  "password": "senha123"
}

### 11. Teste de erro - Criar usuário sem campos obrigatórios
POST http://localhost:3000/api/users
Content-Type: application/json

{
  "name": "Usuário Incompleto"
} 